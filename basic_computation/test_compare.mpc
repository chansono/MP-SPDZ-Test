print_float_precision(32)

# for shamir et al
# program.use_edabit(True)
# for replicated-ring et al
program.use_split(3)

n_users = 2

size = 10000000
if len(program.args) > 1:
    size = int(program.args[1])

batch_size_base = 10000
if len(program.args) > 2:
    batch_size_base = int(program.args[2])

n_threads = 16
if len(program.args) > 3:
    n_threads = int(program.args[3])

n_batches = 1
batch_size = size
if size > batch_size_base:
    batch_size = batch_size_base
    n_batches = size // batch_size

inputs = Matrix(n_users, size, sfloat)


@for_range_opt(n_batches)
def _(batch):
    for i in range(n_users):
        inputs[i].assign(sfloat.get_input_from(i, size=batch_size), batch * batch_size)


@for_range_opt_multithread(n_threads, n_batches)
def _(batch):
    input_0_batch = inputs[0].get_vector(base=batch * batch_size, size=batch_size)
    input_1_batch = inputs[1].get_vector(base=batch * batch_size, size=batch_size)
    result_batch = input_0_batch > input_1_batch
    result_batch.reveal()
    # print_ln("result: %s", result_batch.reveal())
